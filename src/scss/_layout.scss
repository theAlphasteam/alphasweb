// Themes
html{
  &.dark{
    --dark: #{$bg};
    --dark-trans: #{$dark-trans};
    --dark-trans-blur: #{$bg-trans-blur};

    --bg: #{$dark-2};
    --bg-trans: #{$dark-2-trans};
    --bg-trans-blur: #{$dark-2-trans-blur};

    --bg-2: #{$dark};
    --bg-2-trans: #{$dark-trans};
    --bg-2-trans-blur: #{$dark-trans-blur};
  }

  &.purple{
    --main: #{$main-2};
    --main-trans: #{$main-2-trans};
    --main-trans-blur: #{$main-2-trans-blur};
    --main-2: #{$main};
    --main-2-trans: #{$main-trans};
    --main-2-trans-blur: #{$main-trans-blur};

    --main-gradient: #{$main-2};
    --main-gradient-trans: #{$main-2-trans};
    --main-gradient-trans-blur: #{$main-2-trans-blur};
    }

  // &.light{
  //   --dark: #{$dark};
  //   --dark-trans: #{$dark-trans};
  //   --dark-trans-blur: #{$dark-trans-blur};

  //   --bg: #{$bg};
  //   --bg-trans: #{$bg-trans};
  //   --bg-trans-blur: #{$bg-trans-blur};

  //   --bg-2: #{$bg-2};
  //   --bg-2-trans: #{$bg-2-trans};
  //   --bg-2-trans-blur: #{$bg-2-trans-blur};
  // }
}


// layout utility classes

.grid {
    display: grid;
    gap: $defValEm;

    &__first{
      grid-row-start: 1;
    }

    @media screen and (min-width: 768px){

      &__first{
        grid-row-start: unset;
      }

      // 1 11
      &--1-11 {
      }

      // 2 10
      &--1-5 {
      }
      // 3 9
      &--1-3 {
      }

      // 4 8
      &--1-2 {
      }

      // 5 7
      &--5-7 {
      }

      // 6 6
      &--1-1 {
        grid-template-columns: 1fr 1fr;
      }

      // 7 5
      &--7-5 {
        grid-template-columns: 7fr 5fr;
      }

      // 8 4
      &--2-1 {
      }

      // 9 3
      &--3-1 {
      }

      // 10 2
      &--5-1 {
      }

      // 11 1
      &--11-1 {
      }

    }
}

.max-width {
  @each $var in map-get($map: $breakpoints, $key: "widths") {
    &--#{$var} {
      width: 100%;
      max-width: $var + px;
      margin: auto;
    }
  }
}

.pad {
  @for $var from 0 through 8 {
    &--#{$var} {
      padding: $defValpx * $var;
    }

    &--x-#{$var} {
      padding-left: $defValpx * $var;
      padding-right: $defValpx * $var;
    }

    &--y-#{$var} {
      padding-top: $defValpx * $var;
      padding-bottom: $defValpx * $var;
    }

    &--#{$var}em {
      padding: $defValEm * $var;
    }

    &--x-#{$var}em {
      padding-left: $defValEm * $var;
      padding-right: $defValEm * $var;
    }

    &--y-#{$var}em {
      padding-top: $defValEm * $var;
      padding-bottom: $defValEm * $var;
    }

    &--t-#{$var}em {
      padding-top: $defValEm * $var;
    }

    &--b-#{$var}em {
      padding-bottom: $defValEm * $var;
    }
  }
}

.m {
  @for $var from 0 through 8 {
    &--#{$var} {
      margin: $defValpx * $var;
    }
    &b--#{$var} {
      margin-bottom: $defValpx * $var;
    }
    &t--#{$var} {
      margin-top: $defValpx * $var;
    }

    &x--#{$var} {
      margin-left: $defValpx * $var;
      margin-right: $defValpx * $var;
    }

    &y--#{$var} {
      margin-top: $defValpx * $var;
      margin-bottom: $defValpx * $var;
    }

    &--#{$var}em {
      margin: $defValEm * $var;
    }

    &x--#{$var}em {
      margin-left: $defValEm * $var;
      margin-right: $defValEm * $var;
    }

    &y--#{$var}em {
      margin-top: $defValEm * $var;
      margin-bottom: $defValEm * $var;
    }
  }
}



// special section layouts

.bg {
  &--page {
    position: absolute;
    z-index: 0;
    width: 100%;
    height: 100%;
    top: 0;
    left: 0;
    overflow: hidden;
  }

  &__img-cont {
    pointer-events: none;
    width: 100%;
    height: 100%;

    img{
        height: 100%;
        object-fit: cover;
    }
  }

  @each $colorkey, $value in $colorListObj {
    &--#{$colorkey} {
      background: map-get($map: $value, $key: "main");

      *{
        color: map-get($map: $value, $key: "alt");
        fill: map-get($map: $value, $key: "alt");
      }
    }
  }

  &--txt {
    background-clip: text;
    -webkit-background-clip: text;
    -webkit-text-fill-color: transparent;

    @each $color, $value in $colorsListVar {
      &-#{$color} {
        background-color: $value;
      }
    }
    @each $color, $value in $colorsList-gradVar {
      &-#{$color} {
        background-image: $value;
        background-color: $value;
      }
    }
  }
}

.overlay {
  position: relative;

  &::after {
    content: "";
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
  }

  @each $color, $value in $colorsList {
    &--#{$color} {
      &::after {
        background: transparentize($value, $amount: 0.4);
      }
    }
  }
}



// global layouts

.site-sect {
  position: relative;
  padding-left: $defValEm * 2;
  padding-right: $defValEm * 2;
  width: 100%;
}

.hero{
    width: 100%;
    min-height: 100vh;
    display: flex;
    align-items: center;
    position: relative;

    &__caption{
      line-height: $defValEm * 1.15;
      color: var(--main);
      font-weight: 900;
    }

}



// global containers
.img-cont {
  width: 100%;

  img {
    width: 100%;
  }
}

// global components
@mixin glass($color) {
  backdrop-filter: blur(22px);
  border: solid 3px transparentize($color, $amount: 0.68);
  background-clip: padding-box !important;
  background: transparentize($color, $amount: 0.56);
  // box-shadow: 10px 10px 22px transparentize($color, $amount: 0.68);
}

.glass {
  backdrop-filter: blur(22px);
  border: solid 3px transparent;
  background-clip: padding-box !important;

  // @each $color, $value in $colorsList-transVar {
  //   &--#{$color} {
  //     background: $value;
  //     // box-shadow: 10px 10px 22px transparentize($value, $amount: 0.88);
  //     border-color: $value;
  //   }
  // }

  // @each $color, $value in $colorsList {
  //   &--#{$color} {
  //     background: transparentize($value, $amount: 0.56);
  //     // box-shadow: 10px 10px 22px transparentize($value, $amount: 0.88);
  //     border-color: transparentize($value, $amount: 0.88);
  //   }
  // }

  @each $colorkey, $value in $colorListObj-transVar {
    &--#{$colorkey} {
      background: map-get($map: $value, $key: "bg");
      border-color: map-get($map: $value, $key: "stroke");
    }
  }


  &--bg {
    box-shadow: 10px 10px 22px var(--dark-trans);
    color: var(--dark);
  }
}


.cta {
  padding: $defValpx $defValpx * 2;
  border-radius: $defValpx / 1.5;
  outline: none;
  border: unset;
  // background: var(--bg);
  font-family: $header-font;
  cursor: pointer;
  @include hover-scale();

  @each $colorkey, $value in $colorListObj {
    &--#{$colorkey} {
      &-hover{
        &:hover{
          background: map-get($map: $value, $key: "main");
          color: map-get($map: $value, $key: "alt");

          * {
            color: map-get($map: $value, $key: "alt");
            fill: map-get($map: $value, $key: "alt");
          }
        }
      }

      background: map-get($map: $value, $key: "main");
      color: map-get($map: $value, $key: "alt");

      * {
        fill: map-get($map: $value, $key: "alt");
        color: map-get($map: $value, $key: "alt");
      }
    }
  }

  @each $colorkey, $value in $colorListObj-grad {
    &--#{$colorkey} {
      &-hover{
        &:hover{
          background: map-get($map: $value, $key: "main");
          color: map-get($map: $value, $key: "alt");

          * {
            color: map-get($map: $value, $key: "alt");
            fill: map-get($map: $value, $key: "alt");
          }
        }
      }

      background: map-get($map: $value, $key: "main");
      color: map-get($map: $value, $key: "alt");

      * {
        fill: map-get($map: $value, $key: "alt");
      }
    }
  }
}

.icon{
  svg{
    *{
      fill: var(--dark);
    }
  }
  &--sm{
    svg{
      width: 16px;
      height: 16px;
    }
  }

  &--md{
    svg{
      width: 32px;
      height: 32px;
    }
  }
}